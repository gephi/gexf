default namespace = "http://www.gexf.net/1.3"
namespace     viz = "http://www.gexf.net/1.3/viz"
namespace       a = "http://relaxng.org/ns/compatibility/annotations/1.0"
namespace     rng = "http://relaxng.org/ns/structure/1.0"
datatypes     xsd = "http://www.w3.org/2001/XMLSchema-datatypes"

include "data.rnc"
include "dynamics.rnc"
include "viz.rnc" inherit = viz

## Grammar root

start = element gexf { gexf-content }

# Gexf
gexf-content = 
    attribute version { string "1.3" }
  & attribute variant { xsd:string }?
  & (element meta { meta-content }?
  ,  element graph { graph-content })

# Meta
meta-content =
    attribute lastmodifieddate { xsd:date }?
  & element creator { text }?
  & element keywords { text }?
  & element description { text }?

# Graph
graph-content =
    attribute defaultedgetype { defaultedgetype-type }?
  & attribute idtype { idtype-type }?
  & (element nodes { nodes-content }
  ,  element edges { edges-content })

# Nodes
nodes-content =
    attribute count { xsd:nonNegativeInteger }?
  & element node { node-content }*

# Edges
edges-content =
    attribute count { xsd:nonNegativeInteger }?
  & element edge { edge-content }*

# Node
node-content =
    attribute id { id-type }
  & attribute label { xsd:token }?

# Edge
edge-content =
    attribute id { id-type }?
  & attribute type { edgetype-type }?
  & attribute label { xsd:token }?
  & attribute source { id-type }
  & attribute target { id-type }
  & attribute weight { weight-type }?
  & attribute kind { xsd:token}?

## Hierarchy

# Extends nodes
node-content &=
    attribute pid { id-type }?
  & element nodes { nodes-content }?
  & element edges { edges-content }?

## Phylogenics

# Extends nodes
node-content &=
    element parents { parents-content }?

# Parents
parents-content =
    element parent { parent-content }*

# Parent
parent-content =
    attribute for { id-type }

## Datatypes

# Default edge type
defaultedgetype-type = [ a:defaultValue = "undirected" ] 
    string "directed" | 
    string "undirected" | 
    string "mutual"

# Edge type
edgetype-type = [ a:defaultValue = "undirected" ] 
    string "directed" | 
    string "undirected" | 
    string "mutual"

# Id type
id-type |=
    xsd:string | xsd:integer | xsd:long

# Id type (for graph)
idtype-type = [ a:defaultValue = "string" ] 
    string "integer" |
    string "string"

# Edge weigth
weight-type = [ a:defaultValue = "1.0" ] 
    xsd:double

